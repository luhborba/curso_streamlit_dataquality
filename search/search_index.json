{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Principal Seja bem vindo a documenta\u00e7\u00e3o do Projeto de Data Quality, para valida\u00e7\u00e3o de arquivo CSV utilizando Streamlit. Bibliotecas Utilizadas para o Projeto streamlit black isort pydocstyle mkdocs pip-audit pre-commit taskipy selenium pytest pydantic sqlalchemy Layout da P\u00e1gina de Documenta\u00e7\u00e3o Esta documenta\u00e7\u00e3o \u00e9 divida em X p\u00e1ginas, s\u00e3o elas: Principal BackEnd FrontEnd Testes Autores do Projeto: Autor: Luciano Borba","title":"Principal"},{"location":"#principal","text":"Seja bem vindo a documenta\u00e7\u00e3o do Projeto de Data Quality, para valida\u00e7\u00e3o de arquivo CSV utilizando Streamlit.","title":"Principal"},{"location":"#bibliotecas-utilizadas-para-o-projeto","text":"streamlit black isort pydocstyle mkdocs pip-audit pre-commit taskipy selenium pytest pydantic sqlalchemy","title":"Bibliotecas Utilizadas para o Projeto"},{"location":"#layout-da-pagina-de-documentacao","text":"Esta documenta\u00e7\u00e3o \u00e9 divida em X p\u00e1ginas, s\u00e3o elas: Principal BackEnd FrontEnd Testes","title":"Layout da P\u00e1gina de Documenta\u00e7\u00e3o"},{"location":"#autores-do-projeto","text":"Autor: Luciano Borba","title":"Autores do Projeto:"},{"location":"p2-backend/","text":"BackEnd P\u00e1gina de Backend do Projeto. Contrato de Dados Bases: BaseModel Classe respons\u00e1vel pelo contrato de dados do Funcion\u00e1rio. Parameters: Name Type Description Default id PositiveInt ID do Funcion\u00e1rio. required nome str Nome do Funcion\u00e1rio. required idade PositiveInt Idade do Funcion\u00e1rio. required datanascimento datetime Data de Nascimento do Funcion\u00e1rio. required email EmailStr Email do Funcion\u00e1rio. required cargo str Cargo do Funcion\u00e1rio. required departamento str Departamento do Funcion\u00e1rio. required Source code in src\\schema.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class ContratoFuncionarios ( BaseModel ): \"\"\" Classe respons\u00e1vel pelo contrato de dados do Funcion\u00e1rio. Args: id (PositiveInt): ID do Funcion\u00e1rio. nome (str): Nome do Funcion\u00e1rio. idade (PositiveInt): Idade do Funcion\u00e1rio. datanascimento (datetime): Data de Nascimento do Funcion\u00e1rio. email (EmailStr): Email do Funcion\u00e1rio. cargo (str): Cargo do Funcion\u00e1rio. departamento (str): Departamento do Funcion\u00e1rio. \"\"\" id : PositiveInt nome : str idade : PositiveInt datanascimento : datetime email : EmailStr cargo : str departamento : str Defini\u00e7\u00e3o do Banco de Dados Bases: Base Classe de Funcion\u00e1rios utilizando a ORM SQLAlchemy. Parameters: Name Type Description Default id int ID do Funcion\u00e1rio. required nome str Nome do Funcion\u00e1rio. required idade int Idade do Funcion\u00e1rio. required datanascimento datetime Data de Nascimento do Funcion\u00e1rio. required email str Email do Funcion\u00e1rio. required cargo str Cargo do Funcion\u00e1rio. required departamento str Departamento do Funcion\u00e1rio. required Source code in src\\database.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Funcionarios ( Base ): \"\"\" Classe de Funcion\u00e1rios utilizando a ORM SQLAlchemy. Args: id (int): ID do Funcion\u00e1rio. nome (str): Nome do Funcion\u00e1rio. idade (int): Idade do Funcion\u00e1rio. datanascimento (datetime): Data de Nascimento do Funcion\u00e1rio. email (str): Email do Funcion\u00e1rio. cargo (str): Cargo do Funcion\u00e1rio. departamento (str): Departamento do Funcion\u00e1rio. \"\"\" __tablename__ = \"funcionarios\" id = Column ( Integer , primary_key = True ) nome = Column ( String ) idade = Column ( Integer ) datanascimento = Column ( DateTime ) email = Column ( String ) cargo = Column ( String ) departamento = Column ( String ) Conex\u00e3o com Banco de Dados Fun\u00e7\u00e3o de Conex\u00e3o com o Banco de Dados. Source code in src\\database.py 32 33 34 35 36 37 def criar_sessao (): \"\"\"Fun\u00e7\u00e3o de Conex\u00e3o com o Banco de Dados.\"\"\" engine = create_engine ( \"sqlite:///funcionarios.db\" ) Base . metadata . create_all ( engine ) Session = sessionmaker ( bind = engine ) return Session () Fun\u00e7\u00e3o de Valida\u00e7\u00e3o e Envio dos Dados Fun\u00e7\u00e3o de Validar o arquivo em formato csv e inserir dados no Banco de Dados. Parameters: Name Type Description Default csv str Caminho do arquivo csv. required session Session Sess\u00e3o do SQLAlchemy. required Source code in main.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def validar_e_inserir_no_banco ( csv , session ): \"\"\" Fun\u00e7\u00e3o de Validar o arquivo em formato csv e inserir dados no Banco de Dados. Args: csv (str): Caminho do arquivo csv. session (Session): Sess\u00e3o do SQLAlchemy. \"\"\" try : df = pd . read_csv ( csv ) erros = [] dados_validos = [] for idx , row in df . iterrows (): try : ContratoFuncionarios ( ** row . to_dict ()) row [ \"datanascimento\" ] = datetime . strptime ( row [ \"datanascimento\" ], \"%Y-%m- %d \" ) dados_validos . append ( Funcionarios ( ** row . to_dict ())) except Exception as e : erros . append ( f \"Error na Linha: { idx + 2 } de { e } \" ) if erros : st . error ( \"Erros encontrados no Arquivo Enviado:\" ) for erro in erros : st . error ( erro ) else : session . add_all ( dados_validos ) session . commit () st . success ( \"Arquivo Valido e Dados Inseridos no Banco de Dados!\" ) return True except Exception as e : st . error ( f \"Error ao ler o arquivo: { e } \" )","title":"BackEnd"},{"location":"p2-backend/#backend","text":"P\u00e1gina de Backend do Projeto.","title":"BackEnd"},{"location":"p2-backend/#contrato-de-dados","text":"Bases: BaseModel Classe respons\u00e1vel pelo contrato de dados do Funcion\u00e1rio. Parameters: Name Type Description Default id PositiveInt ID do Funcion\u00e1rio. required nome str Nome do Funcion\u00e1rio. required idade PositiveInt Idade do Funcion\u00e1rio. required datanascimento datetime Data de Nascimento do Funcion\u00e1rio. required email EmailStr Email do Funcion\u00e1rio. required cargo str Cargo do Funcion\u00e1rio. required departamento str Departamento do Funcion\u00e1rio. required Source code in src\\schema.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class ContratoFuncionarios ( BaseModel ): \"\"\" Classe respons\u00e1vel pelo contrato de dados do Funcion\u00e1rio. Args: id (PositiveInt): ID do Funcion\u00e1rio. nome (str): Nome do Funcion\u00e1rio. idade (PositiveInt): Idade do Funcion\u00e1rio. datanascimento (datetime): Data de Nascimento do Funcion\u00e1rio. email (EmailStr): Email do Funcion\u00e1rio. cargo (str): Cargo do Funcion\u00e1rio. departamento (str): Departamento do Funcion\u00e1rio. \"\"\" id : PositiveInt nome : str idade : PositiveInt datanascimento : datetime email : EmailStr cargo : str departamento : str","title":"Contrato de Dados"},{"location":"p2-backend/#definicao-do-banco-de-dados","text":"Bases: Base Classe de Funcion\u00e1rios utilizando a ORM SQLAlchemy. Parameters: Name Type Description Default id int ID do Funcion\u00e1rio. required nome str Nome do Funcion\u00e1rio. required idade int Idade do Funcion\u00e1rio. required datanascimento datetime Data de Nascimento do Funcion\u00e1rio. required email str Email do Funcion\u00e1rio. required cargo str Cargo do Funcion\u00e1rio. required departamento str Departamento do Funcion\u00e1rio. required Source code in src\\database.py 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 class Funcionarios ( Base ): \"\"\" Classe de Funcion\u00e1rios utilizando a ORM SQLAlchemy. Args: id (int): ID do Funcion\u00e1rio. nome (str): Nome do Funcion\u00e1rio. idade (int): Idade do Funcion\u00e1rio. datanascimento (datetime): Data de Nascimento do Funcion\u00e1rio. email (str): Email do Funcion\u00e1rio. cargo (str): Cargo do Funcion\u00e1rio. departamento (str): Departamento do Funcion\u00e1rio. \"\"\" __tablename__ = \"funcionarios\" id = Column ( Integer , primary_key = True ) nome = Column ( String ) idade = Column ( Integer ) datanascimento = Column ( DateTime ) email = Column ( String ) cargo = Column ( String ) departamento = Column ( String )","title":"Defini\u00e7\u00e3o do Banco de Dados"},{"location":"p2-backend/#conexao-com-banco-de-dados","text":"Fun\u00e7\u00e3o de Conex\u00e3o com o Banco de Dados. Source code in src\\database.py 32 33 34 35 36 37 def criar_sessao (): \"\"\"Fun\u00e7\u00e3o de Conex\u00e3o com o Banco de Dados.\"\"\" engine = create_engine ( \"sqlite:///funcionarios.db\" ) Base . metadata . create_all ( engine ) Session = sessionmaker ( bind = engine ) return Session ()","title":"Conex\u00e3o com Banco de Dados"},{"location":"p2-backend/#funcao-de-validacao-e-envio-dos-dados","text":"Fun\u00e7\u00e3o de Validar o arquivo em formato csv e inserir dados no Banco de Dados. Parameters: Name Type Description Default csv str Caminho do arquivo csv. required session Session Sess\u00e3o do SQLAlchemy. required Source code in main.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 def validar_e_inserir_no_banco ( csv , session ): \"\"\" Fun\u00e7\u00e3o de Validar o arquivo em formato csv e inserir dados no Banco de Dados. Args: csv (str): Caminho do arquivo csv. session (Session): Sess\u00e3o do SQLAlchemy. \"\"\" try : df = pd . read_csv ( csv ) erros = [] dados_validos = [] for idx , row in df . iterrows (): try : ContratoFuncionarios ( ** row . to_dict ()) row [ \"datanascimento\" ] = datetime . strptime ( row [ \"datanascimento\" ], \"%Y-%m- %d \" ) dados_validos . append ( Funcionarios ( ** row . to_dict ())) except Exception as e : erros . append ( f \"Error na Linha: { idx + 2 } de { e } \" ) if erros : st . error ( \"Erros encontrados no Arquivo Enviado:\" ) for erro in erros : st . error ( erro ) else : session . add_all ( dados_validos ) session . commit () st . success ( \"Arquivo Valido e Dados Inseridos no Banco de Dados!\" ) return True except Exception as e : st . error ( f \"Error ao ler o arquivo: { e } \" )","title":"Fun\u00e7\u00e3o de Valida\u00e7\u00e3o e Envio dos Dados"},{"location":"p3-frontend/","text":"FrontEnd P\u00e1gina de documenta\u00e7\u00e3o do FrontEnd. Fun\u00e7\u00e3o de FrontEnd Fun\u00e7\u00e3o principal onde executo o Streamlit para validar o CSV. Source code in main.py 47 48 49 50 51 52 53 54 55 56 57 58 def main (): \"\"\"Fun\u00e7\u00e3o principal onde executo o Streamlit para validar o CSV.\"\"\" st . set_page_config ( page_title = \"Validador de CSV\" , layout = \"wide\" ) st . title ( \"Validador de CSV\" ) session = criar_sessao () csv = st . file_uploader ( \"Escolha um arquivo CSV para validar\" , type = [ \"csv\" ]) botao = st . button ( \"Validar\" ) if botao : validar_e_inserir_no_banco ( csv , session )","title":"FrontEnd"},{"location":"p3-frontend/#frontend","text":"P\u00e1gina de documenta\u00e7\u00e3o do FrontEnd.","title":"FrontEnd"},{"location":"p3-frontend/#funcao-de-frontend","text":"Fun\u00e7\u00e3o principal onde executo o Streamlit para validar o CSV. Source code in main.py 47 48 49 50 51 52 53 54 55 56 57 58 def main (): \"\"\"Fun\u00e7\u00e3o principal onde executo o Streamlit para validar o CSV.\"\"\" st . set_page_config ( page_title = \"Validador de CSV\" , layout = \"wide\" ) st . title ( \"Validador de CSV\" ) session = criar_sessao () csv = st . file_uploader ( \"Escolha um arquivo CSV para validar\" , type = [ \"csv\" ]) botao = st . button ( \"Validar\" ) if botao : validar_e_inserir_no_banco ( csv , session )","title":"Fun\u00e7\u00e3o de FrontEnd"},{"location":"p4-test/","text":"Testes P\u00e1gina de Documenta\u00e7\u00e3o dos Testes. Testes de Aplica\u00e7\u00e3o driver () Fun\u00e7\u00e3o que inicializa o Selenium e o WebDriver. Source code in test\\test_app.py 8 9 10 11 12 13 14 15 16 17 18 19 20 @pytest . fixture def driver (): \"\"\"Fun\u00e7\u00e3o que inicializa o Selenium e o WebDriver.\"\"\" processo = subprocess . Popen ([ \"streamlit\" , \"run\" , \"main.py\" ]) driver = webdriver . Chrome () driver . get ( \"http://localhost:8501\" ) driver . set_page_load_timeout ( 10 ) yield driver driver . quit () processo . kill () test_open_app ( driver ) Testa se o site est\u00e1 aberindo corretamente. Source code in test\\test_app.py 23 24 25 26 def test_open_app ( driver ): \"\"\"Testa se o site est\u00e1 aberindo corretamente.\"\"\" driver . get ( \"http://localhost:8501\" ) sleep ( 2 ) test_title_app ( driver ) Testa se o site est\u00e1 com o titulo correto. Source code in test\\test_app.py 29 30 31 32 33 def test_title_app ( driver ): \"\"\"Testa se o site est\u00e1 com o titulo correto.\"\"\" driver . get ( \"http://localhost:8501\" ) sleep ( 2 ) assert driver . title == \"Validador de CSV\" Teste de Schema Arquivo de teste do schema definido. test__n_negativo_dados_invalidos () Testa se o schema de dados \u00e9 invalido. Source code in test\\test_schema.py 48 49 50 51 52 53 54 55 56 57 58 59 60 def test__n_negativo_dados_invalidos (): \"\"\"Testa se o schema de dados \u00e9 invalido.\"\"\" dados_invalidos = { \"id\" : - 1 , \"nome\" : \"Luciano Borba\" , \"idade\" : 23 , \"datanascimento\" : datetime . now (), \"email\" : \"luhborbafilho@gmail.com\" , \"cargo\" : \"Desenvolvedor Python\" , \"departamento\" : \"TI\" , } with pytest . raises ( ValidationError ): ContratoFuncionarios ( ** dados_invalidos ) test_email_invalidos_contrato_funcionario () Testa se o schema de dados \u00e9 invalido. Source code in test\\test_schema.py 33 34 35 36 37 38 39 40 41 42 43 44 45 def test_email_invalidos_contrato_funcionario (): \"\"\"Testa se o schema de dados \u00e9 invalido.\"\"\" dados_invalidos = { \"id\" : 1 , \"nome\" : \"Luciano Borba\" , \"idade\" : 23 , \"datanascimento\" : datetime . now (), \"email\" : \"luhborbafilho\" , \"cargo\" : \"Desenvolvedor Python\" , \"departamento\" : \"TI\" , } with pytest . raises ( ValidationError ): ContratoFuncionarios ( ** dados_invalidos ) test_validar_contrato () Teste para validar o schema. Source code in test\\test_schema.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def test_validar_contrato (): \"\"\"Teste para validar o schema.\"\"\" dados_validos = { \"id\" : 1 , \"nome\" : \"Gustavo\" , \"idade\" : 18 , \"datanascimento\" : datetime . now (), \"email\" : \"gustavo@email.com\" , \"cargo\" : \"Desenvolvedor\" , \"departamento\" : \"TI\" , } funcionario = ContratoFuncionarios ( ** dados_validos ) assert funcionario . id == dados_validos [ \"id\" ] assert funcionario . nome == dados_validos [ \"nome\" ] assert funcionario . idade == dados_validos [ \"idade\" ] assert funcionario . datanascimento == dados_validos [ \"datanascimento\" ] assert funcionario . email == dados_validos [ \"email\" ] assert funcionario . cargo == dados_validos [ \"cargo\" ] assert funcionario . departamento == dados_validos [ \"departamento\" ]","title":"Testes"},{"location":"p4-test/#testes","text":"P\u00e1gina de Documenta\u00e7\u00e3o dos Testes.","title":"Testes"},{"location":"p4-test/#testes-de-aplicacao","text":"","title":"Testes de Aplica\u00e7\u00e3o"},{"location":"p4-test/#test.test_app.driver","text":"Fun\u00e7\u00e3o que inicializa o Selenium e o WebDriver. Source code in test\\test_app.py 8 9 10 11 12 13 14 15 16 17 18 19 20 @pytest . fixture def driver (): \"\"\"Fun\u00e7\u00e3o que inicializa o Selenium e o WebDriver.\"\"\" processo = subprocess . Popen ([ \"streamlit\" , \"run\" , \"main.py\" ]) driver = webdriver . Chrome () driver . get ( \"http://localhost:8501\" ) driver . set_page_load_timeout ( 10 ) yield driver driver . quit () processo . kill ()","title":"driver"},{"location":"p4-test/#test.test_app.test_open_app","text":"Testa se o site est\u00e1 aberindo corretamente. Source code in test\\test_app.py 23 24 25 26 def test_open_app ( driver ): \"\"\"Testa se o site est\u00e1 aberindo corretamente.\"\"\" driver . get ( \"http://localhost:8501\" ) sleep ( 2 )","title":"test_open_app"},{"location":"p4-test/#test.test_app.test_title_app","text":"Testa se o site est\u00e1 com o titulo correto. Source code in test\\test_app.py 29 30 31 32 33 def test_title_app ( driver ): \"\"\"Testa se o site est\u00e1 com o titulo correto.\"\"\" driver . get ( \"http://localhost:8501\" ) sleep ( 2 ) assert driver . title == \"Validador de CSV\"","title":"test_title_app"},{"location":"p4-test/#teste-de-schema","text":"Arquivo de teste do schema definido.","title":"Teste de Schema"},{"location":"p4-test/#test.test_schema.test__n_negativo_dados_invalidos","text":"Testa se o schema de dados \u00e9 invalido. Source code in test\\test_schema.py 48 49 50 51 52 53 54 55 56 57 58 59 60 def test__n_negativo_dados_invalidos (): \"\"\"Testa se o schema de dados \u00e9 invalido.\"\"\" dados_invalidos = { \"id\" : - 1 , \"nome\" : \"Luciano Borba\" , \"idade\" : 23 , \"datanascimento\" : datetime . now (), \"email\" : \"luhborbafilho@gmail.com\" , \"cargo\" : \"Desenvolvedor Python\" , \"departamento\" : \"TI\" , } with pytest . raises ( ValidationError ): ContratoFuncionarios ( ** dados_invalidos )","title":"test__n_negativo_dados_invalidos"},{"location":"p4-test/#test.test_schema.test_email_invalidos_contrato_funcionario","text":"Testa se o schema de dados \u00e9 invalido. Source code in test\\test_schema.py 33 34 35 36 37 38 39 40 41 42 43 44 45 def test_email_invalidos_contrato_funcionario (): \"\"\"Testa se o schema de dados \u00e9 invalido.\"\"\" dados_invalidos = { \"id\" : 1 , \"nome\" : \"Luciano Borba\" , \"idade\" : 23 , \"datanascimento\" : datetime . now (), \"email\" : \"luhborbafilho\" , \"cargo\" : \"Desenvolvedor Python\" , \"departamento\" : \"TI\" , } with pytest . raises ( ValidationError ): ContratoFuncionarios ( ** dados_invalidos )","title":"test_email_invalidos_contrato_funcionario"},{"location":"p4-test/#test.test_schema.test_validar_contrato","text":"Teste para validar o schema. Source code in test\\test_schema.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 def test_validar_contrato (): \"\"\"Teste para validar o schema.\"\"\" dados_validos = { \"id\" : 1 , \"nome\" : \"Gustavo\" , \"idade\" : 18 , \"datanascimento\" : datetime . now (), \"email\" : \"gustavo@email.com\" , \"cargo\" : \"Desenvolvedor\" , \"departamento\" : \"TI\" , } funcionario = ContratoFuncionarios ( ** dados_validos ) assert funcionario . id == dados_validos [ \"id\" ] assert funcionario . nome == dados_validos [ \"nome\" ] assert funcionario . idade == dados_validos [ \"idade\" ] assert funcionario . datanascimento == dados_validos [ \"datanascimento\" ] assert funcionario . email == dados_validos [ \"email\" ] assert funcionario . cargo == dados_validos [ \"cargo\" ] assert funcionario . departamento == dados_validos [ \"departamento\" ]","title":"test_validar_contrato"}]}